//
// Generated file, do not edit! Created by opp_msgc 4.3 from src/PlcFrame.msg.
//

#ifndef _PLCFRAME_M_H_
#define _PLCFRAME_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "Plc.h"
#include "MACAddress.h"
#include "Ieee802Ctrl_m.h"
// }}



/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet PlcJam
 * {
 * }
 * </pre>
 */
class PlcJam : public ::cPacket
{
  protected:

  private:
    void copy(const PlcJam& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcJam&);

  public:
    PlcJam(const char *name=NULL, int kind=0);
    PlcJam(const PlcJam& other);
    virtual ~PlcJam();
    PlcJam& operator=(const PlcJam& other);
    virtual PlcJam *dup() const {return new PlcJam(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, PlcJam& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcJam& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet PlcFrame
 * {
 *     MACAddress dest;
 *     MACAddress src;
 *     
 *     
 *     
 *     int priority; 
 *     
 *     double datarate;	
 *     double PER;			
 *     
 *     int vendorID;
 *     bool isPolite;
 *     simtime_t encapsulationTime;
 *     simtime_t higherLayerOffset;
 *     int hopCounter;
 *     int type;
 *     
 * }
 * </pre>
 */
class PlcFrame : public ::cPacket
{
  protected:
    MACAddress dest_var;
    MACAddress src_var;
    int priority_var;
    double datarate_var;
    double PER_var;
    int vendorID_var;
    bool isPolite_var;
    simtime_t encapsulationTime_var;
    simtime_t higherLayerOffset_var;
    int hopCounter_var;
    int type_var;

  private:
    void copy(const PlcFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcFrame&);

  public:
    PlcFrame(const char *name=NULL, int kind=0);
    PlcFrame(const PlcFrame& other);
    virtual ~PlcFrame();
    PlcFrame& operator=(const PlcFrame& other);
    virtual PlcFrame *dup() const {return new PlcFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getDest();
    virtual const MACAddress& getDest() const {return const_cast<PlcFrame*>(this)->getDest();}
    virtual void setDest(const MACAddress& dest);
    virtual MACAddress& getSrc();
    virtual const MACAddress& getSrc() const {return const_cast<PlcFrame*>(this)->getSrc();}
    virtual void setSrc(const MACAddress& src);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual double getDatarate() const;
    virtual void setDatarate(double datarate);
    virtual double getPER() const;
    virtual void setPER(double PER);
    virtual int getVendorID() const;
    virtual void setVendorID(int vendorID);
    virtual bool getIsPolite() const;
    virtual void setIsPolite(bool isPolite);
    virtual simtime_t getEncapsulationTime() const;
    virtual void setEncapsulationTime(simtime_t encapsulationTime);
    virtual simtime_t getHigherLayerOffset() const;
    virtual void setHigherLayerOffset(simtime_t higherLayerOffset);
    virtual int getHopCounter() const;
    virtual void setHopCounter(int hopCounter);
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, PlcFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet PlcIIFrame extends PlcFrame
 * {
 *     int PlcType;
 * }
 * </pre>
 */
class PlcIIFrame : public ::PlcFrame
{
  protected:
    int PlcType_var;

  private:
    void copy(const PlcIIFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcIIFrame&);

  public:
    PlcIIFrame(const char *name=NULL, int kind=0);
    PlcIIFrame(const PlcIIFrame& other);
    virtual ~PlcIIFrame();
    PlcIIFrame& operator=(const PlcIIFrame& other);
    virtual PlcIIFrame *dup() const {return new PlcIIFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPlcType() const;
    virtual void setPlcType(int PlcType);
};

inline void doPacking(cCommBuffer *b, PlcIIFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcIIFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet PlcFrameWithLLC extends PlcFrame
 * {
 *     int ssap;
 *     int dsap;
 *     int control;
 * }
 * </pre>
 */
class PlcFrameWithLLC : public ::PlcFrame
{
  protected:
    int ssap_var;
    int dsap_var;
    int control_var;

  private:
    void copy(const PlcFrameWithLLC& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcFrameWithLLC&);

  public:
    PlcFrameWithLLC(const char *name=NULL, int kind=0);
    PlcFrameWithLLC(const PlcFrameWithLLC& other);
    virtual ~PlcFrameWithLLC();
    PlcFrameWithLLC& operator=(const PlcFrameWithLLC& other);
    virtual PlcFrameWithLLC *dup() const {return new PlcFrameWithLLC(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSsap() const;
    virtual void setSsap(int ssap);
    virtual int getDsap() const;
    virtual void setDsap(int dsap);
    virtual int getControl() const;
    virtual void setControl(int control);
};

inline void doPacking(cCommBuffer *b, PlcFrameWithLLC& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcFrameWithLLC& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet PlcFrameWithSNAP extends PlcFrame
 * {
 *     long orgCode;  
 *     int localcode; 
 * }
 * </pre>
 */
class PlcFrameWithSNAP : public ::PlcFrame
{
  protected:
    long orgCode_var;
    int localcode_var;

  private:
    void copy(const PlcFrameWithSNAP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcFrameWithSNAP&);

  public:
    PlcFrameWithSNAP(const char *name=NULL, int kind=0);
    PlcFrameWithSNAP(const PlcFrameWithSNAP& other);
    virtual ~PlcFrameWithSNAP();
    PlcFrameWithSNAP& operator=(const PlcFrameWithSNAP& other);
    virtual PlcFrameWithSNAP *dup() const {return new PlcFrameWithSNAP(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual long getOrgCode() const;
    virtual void setOrgCode(long orgCode);
    virtual int getLocalcode() const;
    virtual void setLocalcode(int localcode);
};

inline void doPacking(cCommBuffer *b, PlcFrameWithSNAP& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcFrameWithSNAP& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet PlcPauseFrame extends PlcFrame
 * {
 *     int pauseTime; 
 * }
 * </pre>
 */
class PlcPauseFrame : public ::PlcFrame
{
  protected:
    int pauseTime_var;

  private:
    void copy(const PlcPauseFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcPauseFrame&);

  public:
    PlcPauseFrame(const char *name=NULL, int kind=0);
    PlcPauseFrame(const PlcPauseFrame& other);
    virtual ~PlcPauseFrame();
    PlcPauseFrame& operator=(const PlcPauseFrame& other);
    virtual PlcPauseFrame *dup() const {return new PlcPauseFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPauseTime() const;
    virtual void setPauseTime(int pauseTime);
};

inline void doPacking(cCommBuffer *b, PlcPauseFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcPauseFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet PlcAutoconfig
 * {
 *     double txrate = 0;
 *     bool halfDuplex = false;
 * }
 * </pre>
 */
class PlcAutoconfig : public ::cPacket
{
  protected:
    double txrate_var;
    bool halfDuplex_var;

  private:
    void copy(const PlcAutoconfig& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcAutoconfig&);

  public:
    PlcAutoconfig(const char *name=NULL, int kind=0);
    PlcAutoconfig(const PlcAutoconfig& other);
    virtual ~PlcAutoconfig();
    PlcAutoconfig& operator=(const PlcAutoconfig& other);
    virtual PlcAutoconfig *dup() const {return new PlcAutoconfig(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getTxrate() const;
    virtual void setTxrate(double txrate);
    virtual bool getHalfDuplex() const;
    virtual void setHalfDuplex(bool halfDuplex);
};

inline void doPacking(cCommBuffer *b, PlcAutoconfig& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcAutoconfig& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * message PlcChannelUpdate
 * {
 *     double datarate;	
 *     double PER;			
 * }
 * </pre>
 */
class PlcChannelUpdate : public ::cMessage
{
  protected:
    double datarate_var;
    double PER_var;

  private:
    void copy(const PlcChannelUpdate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcChannelUpdate&);

  public:
    PlcChannelUpdate(const char *name=NULL, int kind=0);
    PlcChannelUpdate(const PlcChannelUpdate& other);
    virtual ~PlcChannelUpdate();
    PlcChannelUpdate& operator=(const PlcChannelUpdate& other);
    virtual PlcChannelUpdate *dup() const {return new PlcChannelUpdate(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getDatarate() const;
    virtual void setDatarate(double datarate);
    virtual double getPER() const;
    virtual void setPER(double PER);
};

inline void doPacking(cCommBuffer *b, PlcChannelUpdate& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcChannelUpdate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * message PlcSendRequestTDMA
 * {
 *     MACAddress src;
 * }
 * </pre>
 */
class PlcSendRequestTDMA : public ::cMessage
{
  protected:
    MACAddress src_var;

  private:
    void copy(const PlcSendRequestTDMA& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlcSendRequestTDMA&);

  public:
    PlcSendRequestTDMA(const char *name=NULL, int kind=0);
    PlcSendRequestTDMA(const PlcSendRequestTDMA& other);
    virtual ~PlcSendRequestTDMA();
    PlcSendRequestTDMA& operator=(const PlcSendRequestTDMA& other);
    virtual PlcSendRequestTDMA *dup() const {return new PlcSendRequestTDMA(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getSrc();
    virtual const MACAddress& getSrc() const {return const_cast<PlcSendRequestTDMA*>(this)->getSrc();}
    virtual void setSrc(const MACAddress& src);
};

inline void doPacking(cCommBuffer *b, PlcSendRequestTDMA& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlcSendRequestTDMA& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet Token
 * {
 *     MACAddress token;
 *     int vendor_ID;
 *     int type;
 * }
 * </pre>
 */
class Token : public ::cPacket
{
  protected:
    MACAddress token_var;
    int vendor_ID_var;
    int type_var;

  private:
    void copy(const Token& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Token&);

  public:
    Token(const char *name=NULL, int kind=0);
    Token(const Token& other);
    virtual ~Token();
    Token& operator=(const Token& other);
    virtual Token *dup() const {return new Token(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getToken();
    virtual const MACAddress& getToken() const {return const_cast<Token*>(this)->getToken();}
    virtual void setToken(const MACAddress& token);
    virtual int getVendor_ID() const;
    virtual void setVendor_ID(int vendor_ID);
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, Token& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Token& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * message QoSRequest
 * {
 *     int priority;
 * }
 * </pre>
 */
class QoSRequest : public ::cMessage
{
  protected:
    int priority_var;

  private:
    void copy(const QoSRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSRequest&);

  public:
    QoSRequest(const char *name=NULL, int kind=0);
    QoSRequest(const QoSRequest& other);
    virtual ~QoSRequest();
    QoSRequest& operator=(const QoSRequest& other);
    virtual QoSRequest *dup() const {return new QoSRequest(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPriority() const;
    virtual void setPriority(int priority);
};

inline void doPacking(cCommBuffer *b, QoSRequest& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, QoSRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * message MoreBandwidthRequest
 * {
 *  	MACAddress src;   
 * }
 * </pre>
 */
class MoreBandwidthRequest : public ::cMessage
{
  protected:
    MACAddress src_var;

  private:
    void copy(const MoreBandwidthRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MoreBandwidthRequest&);

  public:
    MoreBandwidthRequest(const char *name=NULL, int kind=0);
    MoreBandwidthRequest(const MoreBandwidthRequest& other);
    virtual ~MoreBandwidthRequest();
    MoreBandwidthRequest& operator=(const MoreBandwidthRequest& other);
    virtual MoreBandwidthRequest *dup() const {return new MoreBandwidthRequest(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getSrc();
    virtual const MACAddress& getSrc() const {return const_cast<MoreBandwidthRequest*>(this)->getSrc();}
    virtual void setSrc(const MACAddress& src);
};

inline void doPacking(cCommBuffer *b, MoreBandwidthRequest& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MoreBandwidthRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * message MeasurementData
 * {
 *     simtime_t runTime;
 *     simtime_t runTime_clean;
 *     simtime_t higherLayerOffset;
 *     int priority;
 *     int typeOfModem;
 * }
 * </pre>
 */
class MeasurementData : public ::cMessage
{
  protected:
    simtime_t runTime_var;
    simtime_t runTime_clean_var;
    simtime_t higherLayerOffset_var;
    int priority_var;
    int typeOfModem_var;

  private:
    void copy(const MeasurementData& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MeasurementData&);

  public:
    MeasurementData(const char *name=NULL, int kind=0);
    MeasurementData(const MeasurementData& other);
    virtual ~MeasurementData();
    MeasurementData& operator=(const MeasurementData& other);
    virtual MeasurementData *dup() const {return new MeasurementData(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual simtime_t getRunTime() const;
    virtual void setRunTime(simtime_t runTime);
    virtual simtime_t getRunTime_clean() const;
    virtual void setRunTime_clean(simtime_t runTime_clean);
    virtual simtime_t getHigherLayerOffset() const;
    virtual void setHigherLayerOffset(simtime_t higherLayerOffset);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual int getTypeOfModem() const;
    virtual void setTypeOfModem(int typeOfModem);
};

inline void doPacking(cCommBuffer *b, MeasurementData& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MeasurementData& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * message NetCondition
 * {
 *     int typeOfNet;     
 *     double datarate;
 *     double PER;     
 * }
 * </pre>
 */
class NetCondition : public ::cMessage
{
  protected:
    int typeOfNet_var;
    double datarate_var;
    double PER_var;

  private:
    void copy(const NetCondition& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetCondition&);

  public:
    NetCondition(const char *name=NULL, int kind=0);
    NetCondition(const NetCondition& other);
    virtual ~NetCondition();
    NetCondition& operator=(const NetCondition& other);
    virtual NetCondition *dup() const {return new NetCondition(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getTypeOfNet() const;
    virtual void setTypeOfNet(int typeOfNet);
    virtual double getDatarate() const;
    virtual void setDatarate(double datarate);
    virtual double getPER() const;
    virtual void setPER(double PER);
};

inline void doPacking(cCommBuffer *b, NetCondition& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetCondition& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * message DATA_PlcNet
 * {
 *     int typeOfNet;     
 *     long packetsLost;
 *     long numMessages;
 * }
 * </pre>
 */
class DATA_PlcNet : public ::cMessage
{
  protected:
    int typeOfNet_var;
    long packetsLost_var;
    long numMessages_var;

  private:
    void copy(const DATA_PlcNet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DATA_PlcNet&);

  public:
    DATA_PlcNet(const char *name=NULL, int kind=0);
    DATA_PlcNet(const DATA_PlcNet& other);
    virtual ~DATA_PlcNet();
    DATA_PlcNet& operator=(const DATA_PlcNet& other);
    virtual DATA_PlcNet *dup() const {return new DATA_PlcNet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getTypeOfNet() const;
    virtual void setTypeOfNet(int typeOfNet);
    virtual long getPacketsLost() const;
    virtual void setPacketsLost(long packetsLost);
    virtual long getNumMessages() const;
    virtual void setNumMessages(long numMessages);
};

inline void doPacking(cCommBuffer *b, DATA_PlcNet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DATA_PlcNet& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/PlcFrame.msg</tt> by opp_msgc.
 * <pre>
 * message DATA_PlcMAC
 * {
 *     int typeOfModem;   
 * 	long numCollisions;
 *     long numBackoffs;
 *     simtime_t totalChannelIdleTime; 
 *     simtime_t totalSuccessfulRxTxTime;
 *     simtime_t totalCollisionTime;
 * }
 * </pre>
 */
class DATA_PlcMAC : public ::cMessage
{
  protected:
    int typeOfModem_var;
    long numCollisions_var;
    long numBackoffs_var;
    simtime_t totalChannelIdleTime_var;
    simtime_t totalSuccessfulRxTxTime_var;
    simtime_t totalCollisionTime_var;

  private:
    void copy(const DATA_PlcMAC& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DATA_PlcMAC&);

  public:
    DATA_PlcMAC(const char *name=NULL, int kind=0);
    DATA_PlcMAC(const DATA_PlcMAC& other);
    virtual ~DATA_PlcMAC();
    DATA_PlcMAC& operator=(const DATA_PlcMAC& other);
    virtual DATA_PlcMAC *dup() const {return new DATA_PlcMAC(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getTypeOfModem() const;
    virtual void setTypeOfModem(int typeOfModem);
    virtual long getNumCollisions() const;
    virtual void setNumCollisions(long numCollisions);
    virtual long getNumBackoffs() const;
    virtual void setNumBackoffs(long numBackoffs);
    virtual simtime_t getTotalChannelIdleTime() const;
    virtual void setTotalChannelIdleTime(simtime_t totalChannelIdleTime);
    virtual simtime_t getTotalSuccessfulRxTxTime() const;
    virtual void setTotalSuccessfulRxTxTime(simtime_t totalSuccessfulRxTxTime);
    virtual simtime_t getTotalCollisionTime() const;
    virtual void setTotalCollisionTime(simtime_t totalCollisionTime);
};

inline void doPacking(cCommBuffer *b, DATA_PlcMAC& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DATA_PlcMAC& obj) {obj.parsimUnpack(b);}


#endif // _PLCFRAME_M_H_
